<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.6.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.fx</groupId>
	<artifactId>study</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>study</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>1.8</java.version>
	</properties>

	<profiles>
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<runSystem>dev</runSystem>
			</properties>
		</profile>

		<profile>
			<id>test</id>
			<properties>
				<runSystem>test</runSystem>
			</properties>
		</profile>

		<profile>
			<id>pro</id>
			<properties>
				<runSystem>pro</runSystem>
			</properties>
		</profile>
	</profiles>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!--swagger-->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.7.0</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.7.0</version>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.7</version>
				<executions>
					<execution>
						<!--执行命令所在的生命周期-->
						<phase>compile</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>

								<delete includeEmptyDirs ="true">
									<fileset dir="target/classes/${runSystem}"  />
								</delete>

							</tasks>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<id>copy-resources</id>
						<!-- 在default生命周期的 validate阶段就执行resources插件的copy-resources目标 -->
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<!-- 指定resources插件处理资源文件到哪个目录下 -->
							<!--<outputDirectory>${project.build.outputDirectory}</outputDirectory>-->
							<!--  也可以用下面这样的方式（指定相对url的方式指定outputDirectory）
                            <outputDirectory>target/classes</outputDirectory>
                             -->
							<outputDirectory>target/classes</outputDirectory>
							<!-- 待处理的资源定义 -->
							<resources>
								<resource>
									<!-- 指定resources插件处理哪个目录下的资源文件 -->
									<directory>src/main/resources/</directory>
									<includes>
										<include>*.properties</include>
									</includes>
									<directory>src/main/resources/${runSystem}</directory>
									<includes>
										<include>*.yml</include>
										<include>*.xml</include>
									</includes>
									<!-- 指定不需要处理的资源
                                    <excludes>
                                      <exclude>WEB-INF/*.*</exclude>
                                    </excludes>
                                    -->
									<!-- 是否对待处理的资源开启过滤模式 (resources插件的copy-resources目标也有资源过滤的功能，这里配置的
                                    这个功能的效果跟<build><resources><resource>下配置的资源过滤是一样的，只不过可能执行的阶段不一样，
                                    这里执行的阶段是插件指定的validate阶段，
                                    <build><resources><resource>下的配置将是在resources插件的resources目标执行时起作用（在process-resources阶段）)-->
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>

			</plugin>

		</plugins>

		<finalName>study</finalName>
		<sourceDirectory>src/main/java</sourceDirectory>
		<resources>
			<resource>
				<directory>src/main/resources/</directory>
				<filtering>true</filtering>
				<includes>
					<include>*.properties</include>
					<include>${runSystem}/*.yml</include>
					<include>${runSystem}/*.xml</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.xml</include>
				</includes>
			</resource>
		</resources>

	</build>

</project>
